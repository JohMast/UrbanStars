library(UrbanStars)
install.packages("roxygen2")
devtools::document()
document()
library(devtools)
document()
library(UrbanStars)
library(rgdal)
library(raster)
library(broom)
library(moments)
library(spatialEco)
library(geosphere)
library(UrbanStars)
# source("create_beam.R")
# source("create_star.R")
# source("create_star_click.R")
# source("find_limit.R")
# source("extract_under_star.R")
# source("split_star_into_beams.R")
# source("create_star_crosssections.R")
# source("calculate_star_statistics.R")
####SetBasicParameters####
BeamWidth = 150
BeamLength = 1000
NSegments = 50
NBeams = 8
####================Step 1: Load and prepare Data====================####
####(One of the datasets should contain a urban mask or building density layer)####
###1.1: Create a normalized GUFNorm Layer
GUF <- raster("In/GUF_EAGLE_AOI_UTM_WGS84.tif")
GUFNorm <- GUF / 255
names(GUFNorm) <- "GUFNorm"
##1.2: Select mean NDBI, NDWI, NDVI layers from the timescan stack
TS <- stack("In/TimeScan_EAGLE_AOI_UTM_WGS84.tif")
TS <- subset(TS, c(3, 8, 13))
names(TS) <- c("NDBI", "NDWI", "NDVI")
##1.3: Create Aspect and Slope from the SRTM DEM
SRTM <- raster("In/SRTM_Steigerwald.tif")
Aspect <- terrain(SRTM, opt = "aspect")
Slope <- terrain(SRTM, opt = "slope")
####==============Step 2: Get a list of cities and start looping over it===========####
##2.1: Read a list of Urban Centers
UrbanCentersList <- read.csv2("In/UrbanCenters.csv")[1,]
devtools::document()
?
?
?UrbanStars::calculate_star_statistics()
library(devtools)
document()
?UrbanStars::calculate_star_statistics()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::calculate_star_statistics()
document()
?UrbanStars::create_star()
?UrbanStars::create_star()
document()
?UrbanStars::create_star()
document()
?UrbanStars::create_star_click()
document()
?UrbanStars::create_beam()
document()
?UrbanStars::create_beam()
document()
?UrbanStars::create_beam()
@seealso create_beam(), create_star_click(), geosphere::dest_point()
?UrbanStars::create_beam()
document()
?UrbanStars::create_beam()
document()
?UrbanStars::create_beam()
document()
?UrbanStars::create_beam()
?UrbanStars::extract_under_star()
?create_star_crosssections()
document()
?create_star_crosssections()
document()
?create_star_crosssections()
document()
?create_star_crosssections()
?create_star_crosssections()
document()
?create_star_crosssections()
document()
?create_star_crosssections()
document()
?split_star_into_beams
document()
?create_star_crosssections()
?split_star_into_beams
document()
?find_limit
document()
?find_limit
document()
?find_limit
?find_limit_star
?find_limit
library(UrbanStars)
?calculate_star_statistics
document()
library(UrbanStars)
document()
library(UrbanStars)
document()
?calculate_star_statistics
library(UrbanStars)
UrbanStars::calculate_star_statistics()
?UrbanStars::calculate_star_statistics()
document()
document()
document()
document()
library(UrbanStars)
library(UrbanStars)
?create_beam()
document()
document()
document()
document()
library(UrbanStars)
?weighted.mean
devtools::document()
library(UrbanStars)
devtools::document()
library(UrbanStars)
devtools::document()
library(UrbanStars)
devtools::document()
library(UrbanStars)
devtools::document()
library(UrbanStars)
devtools::document()
library(UrbanStars)
devtools::document
devtools::document()
library(UrbanStars)
devtools::document()#
library(UrbanStars)
