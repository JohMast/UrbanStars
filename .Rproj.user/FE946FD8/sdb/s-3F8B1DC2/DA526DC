{
    "collab_server" : "",
    "contents" : "#' Calculates the statistics for the crosssections of a Star\n#'\n#' @details The function calculates descriptive statistics for the distribution of the raster values extracted under a star.\n#'\n#' If \\code{SubsetToUrban = T} the statistics will be calculated only for the urban segments if the input \\code{StarCrosssections} includes a logical column \"IsUrban\", as created by \\code{find_limit_star}.\n#'\n#' An \\code{UrbanLayerName} is required and returns statistics for the building density distribution.\n#' Optionally, passing \\code{NDVILayerName}, \\code{SlopeLayerName} and \\code{AspectLayerName} will return additional statistics.\n#' All Statistics are calculated for each of the crosssections individually and then averaged over all crosssections, weighted by their length. The exception is MeanUrbanCentralOffset, for which all crosssections are equally weighted.\n#'\n#'\n#'   Calculated statistics include:\n#'  \\enumerate{\n#'   \\item MeanUrbanMean, the weighted mean of the means of the building density\n#'   \\item MeanUrbanSkew, the weighted mean of the skews of the building density\n#'   \\item MeanUrbanKurtosis, the weighted mean of the kurtosis of the building density\n#'   \\item MeanUrbanVariance, the weighted mean of the variances of the building density\n#'   \\item MeanUrbanCentralOff, the mean number of segments by which the maximum of the curves differ from the centers of the building density distributions.\n#'   \\item MeanGreenMean, the weighted mean of the means of the NDVI distributions\n#'   \\item MeanUrbanGreenness, the weighted mean of the scalar products of the building density and the NDVI distributions.\n#'   \\item MeanUrbanGreennessCor, the weighted mean of the correlations of the building density and the NDVI distributions\n#'   \\item MeanUrbanSlope, the weighted mean of the scalar products of the building density and the slope distributions.\n#'   \\item MeanSlopeMean, the weighted mean of the means of the slope\n#'   \\item MeanUrbanAspect, the weighted mean of the means of the aspect\n#' }\n#'\n#' @param StarCrosssections a list of crosssections, as created by \\code{create_star_crosssections}\n#' @param SubsetToUrban a switch indicating if the statistics should only be calculated for urban segments. Requires \\code{UrbanLayerName} to be defined.\n#' @param UrbanLayerName name of the column which holds the urban density values\n#' @param NDVILayerName name of the column which holds the NDVI values\n#' @param SlopeLayerName name of the column which holds the slope values\n#' @param AspectLayerName name of the column which holds the aspect values\n#'\n#' @return Dataframe\n#'\n#' @examples\n#'   calculate_star_statistics(\n#'   StarCrosssections = StarCross,\n#'   SubsetToUrban = F,\n#'   UrbanLayerName = \"GUFNorm\",\n#'   NDVILayerName = \"NDVI\",\n#'   SlopeLayerName = \"slope\",\n#'   AspectLayerName = \"aspect\")\n#'\n#' @seealso\n#' \\code{\\link{create_star_crosssections}},\n#' \\code{\\link{find_limit}}\n#'\n#' @importFrom stats weighted.mean\n#' @importFrom moments skewness\n#' @importFrom moments kurtosis\n#' @export\n#' @author Johannes Mast\n\n##Calculates the statistics for the crosssections of this star:\n\n# CropToUrban requires one column in the DF to be a logical vector called IsUrban\n\n\ncalculate_star_statistics <-\n  function(StarCrosssections,\n           SubsetToUrban = F,\n           UrbanLayerName,\n           NDVILayerName,\n           SlopeLayerName,\n           AspectLayerName) {\n    if (missing(UrbanLayerName)) {\n      print(\"UrbanLayerName required\")\n    }\n\n    ##Optional: Subset the Crosssections to those Segments that are identified as urban\n    if (SubsetToUrban) {\n      if (is.null(StarCrosssections[[1]]$IsUrban)) {\n        print(\"IsUrban column required for subsetting\")\n      }\n\n      #\n      StarCrosssections <- lapply(StarCrosssections, function(x) {\n        x[x[[\"IsUrban\"]],]\n      })\n    }\n\n    #Calculate the weights for the crosssections (equal to the length of the crosssection, all equal if SubsetToUrban=F)\n    WeightsCrosssections <- unlist(lapply(StarCrosssections, function(x) {\n      nrow(x)\n    }))\n\n\n    #============Calculate the Statistics================#\n    ##These Statistics will be calculated, if the necessary columns are specified:\n    MeanUrbanMean <- NA\n    MeanUrbanSkew <- NA\n    MeanUrbanKurtosis <- NA\n    MeanUrbanVariance <- NA\n    MeanUrbanCentralOffset <- NA\n    MeanGreenMean <- NA\n    MeanUrbanGreenness <- NA\n    MeanUrbanGreennessCor <- NA\n    MeanUrbanSlope <- NA\n    MeanSlopeMean <- NA\n    MeanUrbanAspect <- NA\n\n\n    ####Urban Density Statistics\n    ##SImple Mean over the mean of the Building Density of all the Crosssections\n    MeanUrbanMean = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n      colMeans(x[UrbanLayerName])\n    })),WeightsCrosssections)\n\n\n    weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n      colMeans(x[UrbanLayerName])\n    })),WeightsCrosssections)\n\n    ##Simple Mean over the Skewness of the Building Density of all the Crossections\n    MeanUrbanSkew = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n      skewness(x[UrbanLayerName])\n    })),WeightsCrosssections)\n    ##Simple Mean over the Kurtosis of the Building Density of all the Crossections\n    MeanUrbanKurtosis = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n      kurtosis(x[UrbanLayerName])\n    })),WeightsCrosssections)\n\n    ##Simple Mean over the Variance of the Building Density ofall the Crossections\n    MeanUrbanVariance = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n      var(x[UrbanLayerName])\n    })),WeightsCrosssections)\n\n    ## Simple Mean of the CenterOffset\n    ## Which is the distance between the center of the star\n    ## and the maximum of the GUF (measured in segments)\n    ## !The weights for all Crosssections are equal, even if SubsetToUrban=T!\n    MeanUrbanCentralOffset = mean(unlist(lapply(StarCrosssections, function(x) {\n      min(x[\"SegmentId\"][x[UrbanLayerName] == max(x[UrbanLayerName])]) - 1\n    })))\n\n\n    ##If a NDVI Layer Name was given:\n    if (!missing(NDVILayerName)) {\n      ####Urban Greenness Statistics####\n      ## Simple Mean of the GreenMean\n      ## Which is simply the mean NDVI\n      MeanGreenMean = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        colMeans(x[NDVILayerName])\n      })),WeightsCrosssections)\n\n      ## Simple Mean of the Urban Greenness\n      ## Which is the Mean of\n      ## The NDVI of each segment multiplied by its GUF\n      ## As a simple indicator of the presence of green space in urban areas\n      MeanUrbanGreenness = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        colMeans(x[UrbanLayerName] * x[NDVILayerName])\n      })),WeightsCrosssections)\n\n      ## Simple Mean of the UrbanGreennessCorrelation\n      ## Which is the Correlation of the GuF and the NDVI\n      ## As a simple indicator of the presence of green space in urban areas\n      MeanUrbanGreennessCor = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        cor(x[UrbanLayerName], x[NDVILayerName])\n      })),WeightsCrosssections)\n\n    }\n\n\n\n    ##If a slope Layer Name was given\n    if (!missing(SlopeLayerName)) {\n      ####Urban Relief Statistics####\n      ## Simple Mean of the Urban Slope\n      ## Which is the Mean of\n      ## The Slope of each segment multiplied by its GUF\n      ## As a simple indicator of the relief energy in urban areas\n      MeanUrbanSlope = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        colMeans(x[UrbanLayerName] * x[SlopeLayerName])\n      })),WeightsCrosssections)\n\n      ## SImple Mean of the SlopeMean\n      ## Which is simply the mean Slope\n      MeanSlopeMean = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        colMeans(x[SlopeLayerName])\n      })),WeightsCrosssections)\n    }\n\n\n    ## If an Aspect Layer Name was given\n    if (!missing(AspectLayerName)) {\n      ## Simple Mean of the Urban Aspect\n      ## Which is the Mean of\n      ## The Slope of each segment multiplied by its GUF\n      ## As a simple indicator of the preferred aspect of urban areas\n      MeanUrbanAspect = weighted.mean(unlist(lapply(StarCrosssections, function(x) {\n        colMeans(x[UrbanLayerName] * x[AspectLayerName])\n      })),WeightsCrosssections)\n    }\n    #============Return the Statistics================#\n    #return the results as a dataframe\n    return(data.frame(\n      MeanUrbanMean,\n      MeanUrbanSkew,\n      MeanUrbanKurtosis,\n      MeanUrbanVariance,\n      MeanUrbanCentralOffset,\n      MeanGreenMean,\n      MeanUrbanGreenness,\n      MeanUrbanGreennessCor,\n      MeanUrbanSlope,\n      MeanSlopeMean,\n      MeanUrbanAspect))\n  }\n\n\n",
    "created" : 1548457407536.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3796979406",
    "id" : "DA526DC",
    "lastKnownWriteTime" : 1548457417,
    "last_content_update" : 1548457417440,
    "path" : "~/Studiendateien/R_Scripts/UrbanStars/R/calculate_star_statistics.R",
    "project_path" : "R/calculate_star_statistics.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}